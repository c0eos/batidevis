import * as yup from "yup";

const UserSchema = yup.object().shape({
  email: yup.string().email().required(),
  password: yup.string().required(),
});

const ClientSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  code: yup.string().required(),
  nom: yup.string().required(),
  civilite: yup.string(),
  interlocuteur: yup.string(),
  adresse: yup.string(),
  adresse2: yup.string(),
  codePostal: yup.string().length(5),
  ville: yup.string(),
  telephone: yup.string().length(10),
  portable: yup.string().length(10),
  email: yup.string().email(),
  compte: yup.string(),
  info: yup.string(),
  ca: yup.number(),
  solde: yup.number(),
  updated: yup.date().default(() => new Date()),
});

const DevisSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  code: yup.string().required(),
  etat: yup.number().required(),
  date: yup.date(),
  codeClient: yup.string().required(),
  sujet: yup.string(),
  adresseTravaux: yup.string(),
  adresseTravaux2: yup.string(),
  codePostalTravaux: yup.string().length(5),
  villeTravaux: yup.string(),
  info: yup.string(),
  totalDeb: yup.number(),
  totalPR: yup.number(),
  totalPV: yup.number(),
  totalHT: yup.number(),
  totalHTNet: yup.number(),
  flagEscompte: yup.boolean(),
  HTNetFin: yup.number(),
  totalTVA: yup.number(),
  TVAReelle: yup.number(),
  totalTTC: yup.number(),
  acompte: yup.number(),
  netAPayer: yup.number(),
  variante: yup.number(),
  temps: yup.number(),
  transFacture: yup.boolean(),
  flagAcompte: yup.boolean(),
});

const DevisLigneSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  codeDevis: yup.string().required(),
  numLigne: yup.number().integer().required(),
  numBuf: yup.number().integer().required(),
  idSousTotal: yup.number().integer(),
  nivTr: yup.number().integer(),
  nivOuv: yup.number().integer(),
  type: yup.string(),
  numerotation: yup.number().integer(),
  codeElement: yup.string(),
  libelle: yup.string(),
  deb: yup.number(),
  fgF: yup.number(),
  fgMo: yup.number(),
  fgMat: yup.number(),
  fg: yup.number(),
  pr: yup.number(),
  ben: yup.number(),
  coef: yup.number(),
  pv: yup.number(),
  pvEuro: yup.number(),
  pvNet: yup.number(),
  pvNetEuro: yup.number(),
  qte: yup.number(),
  tva: yup.number(),
  compte: yup.string(),
  unite: yup.string(),
  temps: yup.number(),
  nonEdit: yup.number(),
  variante: yup.number(),
});

const FactureSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  code: yup.string().required(),
  date: yup.date(),
  codeClient: yup.string().required(),
  interlocuteur: yup.string(),
  sujet: yup.string(),
  adresseTravaux: yup.string(),
  adresseTravaux2: yup.string(),
  codePostalTravaux: yup.string().length(5),
  villeTravaux: yup.string(),
  info: yup.string(),
  totalDeb: yup.number(),
  totalPR: yup.number(),
  totalPV: yup.number(),
  totalHT: yup.number(),
  totalHTNet: yup.number(),
  flagEscompte: yup.boolean(),
  HTNetFin: yup.number(),
  totalTVA: yup.number(),
  TVAReelle: yup.number(),
  totalTTC: yup.number(),
  acompte: yup.number(),
  netAPayer: yup.number(),
  dateRG: yup.date(),
  temps: yup.number(),
  codeDevis: yup.string().required(),
  numOrdre: yup.number().integer().required(),
  flagAcompte: yup.boolean(),
  dateCreation: yup.date(),
});

const FactureLigneSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  codeFacture: yup.string().required(),
  numLigne: yup.number().integer().required(),
  numBuf: yup.number().integer().required(),
  idSousTotal: yup.number().integer(),
  nivTr: yup.number().integer(),
  nivOuv: yup.number().integer(),
  type: yup.string(),
  numerotation: yup.number().integer(),
  codeElement: yup.string(),
  libelle: yup.string(),
  deb: yup.number(),
  fgF: yup.number(),
  fgMo: yup.number(),
  fgMat: yup.number(),
  fg: yup.number(),
  pr: yup.number(),
  ben: yup.number(),
  coef: yup.number(),
  pv: yup.number(),
  pvEuro: yup.number(),
  pvNet: yup.number(),
  pvNetEuro: yup.number(),
  qte: yup.number(),
  tva: yup.number(),
  compte: yup.string(),
  unite: yup.string(),
  temps: yup.number(),
  nonEdit: yup.number(),
  variante: yup.number(),
  avt: yup.number(),
  qteOrigine: yup.number(),
  pvOrigine: yup.number(),
});

const AcompteSchema = yup.object().shape({
  id: yup.number().integer().positive(),
  code: yup.string().required(),
  date: yup.date(),
  codeClient: yup.string().required(),
  sujet: yup.string(),
  totalHT: yup.number(),
  totalTVA: yup.number(),
  totalTTC: yup.number(),
  dateCreation: yup.date(),
  codeDevis: yup.string(),
  codeFacture: yup.string(),
});

const TVASchema = yup.object().shape({
  id: yup.number().integer().positive(),
  taux: yup.number().required(),
});

// interfaces a partir des schemas yup
interface User extends yup.InferType<typeof UserSchema> {}
interface Client extends yup.InferType<typeof ClientSchema> {}
interface Devis extends yup.InferType<typeof DevisSchema> {}
interface DevisLigne extends yup.InferType<typeof DevisLigneSchema> {}
interface Facture extends yup.InferType<typeof FactureSchema> {}
interface FactureLigne extends yup.InferType<typeof FactureLigneSchema> {}
interface Acompte extends yup.InferType<typeof AcompteSchema> {}
interface TVA extends yup.InferType<typeof TVASchema> {}

export {
  UserSchema,
  User,
  ClientSchema,
  Client,
  DevisSchema,
  Devis,
  DevisLigneSchema,
  DevisLigne,
  FactureSchema,
  Facture,
  FactureLigneSchema,
  FactureLigne,
  AcompteSchema,
  Acompte,
  TVASchema,
  TVA,
};
